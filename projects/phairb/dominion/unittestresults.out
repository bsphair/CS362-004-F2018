Results for unittest1: 

*** Test numHandsCards() ***

*** Current Number of Cards ***
Player's initial cards in hand = 5	

** Add 3 cards to the player's hands ***
Incrementing card count by 1 ->	Player's Cards in Hand = 6
Incrementing card count by 1 ->	Player's Cards in Hand = 7
Incrementing card count by 1 ->	Player's Cards in Hand = 8

*** Current Number of Cards ***
Player's current cards in hand = 8	

*** Subtract 2 cards from player's hand ***
Decrementing card count by 1 ->	Player's Cards in Hand = 7
Decrementing card count by 1 ->	Player's Cards in Hand = 6


*** Current Number of Cards ***
Player's current cards in hand = 6	

*** Remove all cards from player's hands (player should have zero cards) ***
Player's Cards in Hand = 5
Player's Cards in Hand = 4
Player's Cards in Hand = 3
Player's Cards in Hand = 2
Player's Cards in Hand = 1
Player's Cards in Hand = 0


*** Current Number of Cards ***
Player's current cards in hand = 0	

*** Add 23 cards to player's hand ***

*** Current Number of Cards ***
Player's current cards in hand = 23	

All tests for numHandCards() passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'smithy_card'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'adventurer_card'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:0.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:16.20% of 648
Branches executed:15.50% of 413
Taken at least once:12.35% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 28 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
       28:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
       28:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   12:    return -1;
       18:   13:  return 0;
       28:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
      190:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      100:   65:        }
       10:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        1:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        1:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
       10:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      145:  130:	}
        -:  131:
       20:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        6:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
       14:  150:	}
        2:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        2:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        2:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
       27:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  193:    drawCard(state->whoseTurn, state);
        5:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        1:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       44:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
      140:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
       50:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
       20:  226:  }
        -:  227:
        2:  228:  return 0;
        2:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 41%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        5:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
    #####: 1181:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1182:    {
        -: 1183:      //add card to played pile
    #####: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
    #####: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
    #####: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
    #####: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
    #####: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
    #####: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
    #####: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
    #####: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
    #####: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
        1: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
       12: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1263:    {
        5: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1265:	{
        4: 1266:	  state->coins += 1;
        4: 1267:	}
        1: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1269:	{
    #####: 1270:	  state->coins += 2;
    #####: 1271:	}
        1: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1273:	{
    #####: 1274:	  state->coins += 3;
    #####: 1275:	}	
        5: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
        1: 1279:  state->coins += bonus;
        -: 1280:
        1: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 0 returned 0% blocks executed 0%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
    #####: 1289:  for(i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1290:    drawCard(currentplayer, state);
    #####: 1291:  }
        -: 1292:
    #####: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
    #####: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 0 returned 0% blocks executed 0%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
    #####: 1301:    int z = 0;
        -: 1302:
    #####: 1303:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
    #####: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
        -: 1306://            printf("Gonna shuffle\n");
    #####: 1307:            shuffle(currentPlayer, state);
    #####: 1308:        }
        -: 1309:
    #####: 1310:        drawCard(currentPlayer, state);
        -: 1311:
    #####: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
    #####: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1317:            drawntreasure++;
    #####: 1318:        }
        -: 1319:        else{
    #####: 1320:            temphand[z]=cardDrawn;
    #####: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
    #####: 1325:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1327:        z=z-1;
        -: 1328:    }
    #####: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 0 returned 0% blocks executed 0%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
    #####: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for unittest2: 

*** Testing drawCard() ***

Number of players used for testing is 2 players. The first player will originally have 5 cards while the second player will have 0 cards.

Initial amount of cards
Current Card Status:
Player 1 = 5 cards
Player 2 = 0 cards

** Player 1 will draw one card **
Current Card Status:
Player 1 = 6 cards
Player 2 = 0 cards

** Player 1 draw cards until 10 cards in hand **
Current Card Status:
Player 1 = 10 cards
Player 2 = 0 cards

** Player 2 will draw one card **
Current Card Status:
Player 1 = 10 cards
Player 2 = 1 cards

** Player 1 draw cards until 10 cards in hand **
Current Card Status:
Player 1 = 10 cards
Player 2 = 10 cards

** Player 1 will draw one card with 10 cards in hand. Since hand is full, function should not draw anymore cards. **
Current Card Status:
Player 1 = 10 cards
Player 2 = 10 cards

** Player 2 will draw one card with 10 cards in hand. Since hand is full, function should not draw anymore cards. **
Current Card Status:
Player 1 = 10 cards
Player 2 = 10 cards

All tests passed!

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'smithy_card'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'adventurer_card'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:0.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:17.75% of 648
Branches executed:16.46% of 413
Taken at least once:13.32% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 56 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
       56:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
       56:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       20:   12:    return -1;
       36:   13:  return 0;
       56:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 83%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
      380:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      200:   65:        }
       20:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        2:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        2:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
       20:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      290:  130:	}
        -:  131:
       40:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
       12:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
       28:  150:	}
        4:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        4:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        4:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
       54:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       10:  193:    drawCard(state->whoseTurn, state);
       10:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        2:  199:}
        -:  200:
function shuffle called 6 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
branch  0 taken 33%
branch  1 taken 67%
        2:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       88:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       40:  215:    card = floor(Random() * state->deckCount[player]);
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      280:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      100:  219:      state->deck[player][i] = state->deck[player][i+1];
      100:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
       40:  226:  }
        -:  227:
        4:  228:  return 0;
        6:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 29 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       29:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7%
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       27:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       27:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       27:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       27:  576:    state->deckCount[player]--;
       27:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       27:  580:  return 0;
       29:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
    #####: 1181:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1182:    {
        -: 1183:      //add card to played pile
    #####: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
    #####: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
    #####: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
    #####: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
    #####: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
    #####: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
    #####: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
    #####: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
    #####: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 2 returned 100% blocks executed 85%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
        2: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
       24: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1263:    {
       10: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1265:	{
        8: 1266:	  state->coins += 1;
        8: 1267:	}
        2: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1269:	{
    #####: 1270:	  state->coins += 2;
    #####: 1271:	}
        2: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1273:	{
    #####: 1274:	  state->coins += 3;
    #####: 1275:	}	
       10: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
        2: 1279:  state->coins += bonus;
        -: 1280:
        2: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 0 returned 0% blocks executed 0%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
    #####: 1289:  for(i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1290:    drawCard(currentplayer, state);
    #####: 1291:  }
        -: 1292:
    #####: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
    #####: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 0 returned 0% blocks executed 0%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
    #####: 1301:    int z = 0;
        -: 1302:
    #####: 1303:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
    #####: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
        -: 1306://            printf("Gonna shuffle\n");
    #####: 1307:            shuffle(currentPlayer, state);
    #####: 1308:        }
        -: 1309:
    #####: 1310:        drawCard(currentPlayer, state);
        -: 1311:
    #####: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
    #####: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1317:            drawntreasure++;
    #####: 1318:        }
        -: 1319:        else{
    #####: 1320:            temphand[z]=cardDrawn;
    #####: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
    #####: 1325:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1327:        z=z-1;
        -: 1328:    }
    #####: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 0 returned 0% blocks executed 0%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
    #####: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for unittest3: 

*** Testing updateCoins() ***

*** Testing if coins are reset to zero within the function. A number of coins will be added to the coin amount and then it will be deterimined if that number is reset or not. ***
		Player 1
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
		Player 2
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0
Original Coin = 0	Added Coins = 100	Final Coins = 0

*** Test Copper Card ***

		Player 1
Coins: 1 	 Expected: 1
Coins: 2 	 Expected: 2
Coins: 3 	 Expected: 3
Coins: 4 	 Expected: 4
Coins: 5 	 Expected: 5

		Player 2
Coins: 1 	 Expected: 1
Coins: 2 	 Expected: 2
Coins: 3 	 Expected: 3
Coins: 4 	 Expected: 4
Coins: 5 	 Expected: 5

*** Test Silver Card ***

		Player 1
Coins: 2 	 Expected: 2
Coins: 4 	 Expected: 4
Coins: 6 	 Expected: 6
Coins: 8 	 Expected: 8
Coins: 10 	 Expected: 10

		Player 2
Coins: 2 	 Expected: 2
Coins: 4 	 Expected: 4
Coins: 6 	 Expected: 6
Coins: 8 	 Expected: 8
Coins: 10 	 Expected: 10

*** Test Gold Card ***

		Player 1
Coins: 3 	 Expected: 3
Coins: 6 	 Expected: 6
Coins: 9 	 Expected: 9
Coins: 12 	 Expected: 12
Coins: 15 	 Expected: 15

		Player 2
Coins: 3 	 Expected: 3
Coins: 6 	 Expected: 6
Coins: 9 	 Expected: 9
Coins: 12 	 Expected: 12
Coins: 15 	 Expected: 15

*** Test No Card ***

		Player 1
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0

		Player 2
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0
Coins: 0 	 Expected: 0

*** Test Addition of Bonus ***

** Testing Bonus = 0 **
		Player 1
Bonus: 0 	 Expected: 0

		Player 2
Bonus: 0 	 Expected: 0

** Testing Bonus = 1 **
		Player 1
Bonus: 1 	 Expected: 1

		Player 2
Bonus: 1 	 Expected: 1

** Testing Bonus = 2 **
		Player 1
Bonus: 2 	 Expected: 2

		Player 2
Bonus: 2 	 Expected: 2

** Testing Bonus = 3 **
		Player 1
Bonus: 3 	 Expected: 3

		Player 2
Bonus: 3 	 Expected: 3

** Testing Bonus = 4 **
		Player 1
Bonus: 4 	 Expected: 4

		Player 2
Bonus: 4 	 Expected: 4

All Tests Passed!!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'smithy_card'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'adventurer_card'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:0.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:18.98% of 648
Branches executed:16.95% of 413
Taken at least once:14.53% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 84 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
       84:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
       84:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       30:   12:    return -1;
       54:   13:  return 0;
       84:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
      570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      300:   65:        }
       30:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        3:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        3:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       59:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 97%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 97%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
       28:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      435:  130:	}
        -:  131:
       60:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
       18:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
       42:  150:	}
        6:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        6:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        6:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
       81:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       15:  193:    drawCard(state->whoseTurn, state);
       15:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        3:  199:}
        -:  200:
function shuffle called 8 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
branch  0 taken 25%
branch  1 taken 75%
        2:  210:    return -1;
        6:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      132:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       60:  215:    card = floor(Random() * state->deckCount[player]);
       60:  216:    newDeck[newDeckPos] = state->deck[player][card];
       60:  217:    newDeckPos++;
      420:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      150:  219:      state->deck[player][i] = state->deck[player][i+1];
      150:  220:    }
       60:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       60:  224:    state->deck[player][i] = newDeck[i];
       60:  225:    state->deckCount[player]++;
       60:  226:  }
        -:  227:
        6:  228:  return 0;
        8:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 34 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       34:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6%
branch  1 taken 94%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       32:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       32:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       32:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       32:  576:    state->deckCount[player]--;
       32:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       32:  580:  return 0;
       34:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
    #####: 1181:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1182:    {
        -: 1183:      //add card to played pile
    #####: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
    #####: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
    #####: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
    #####: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
    #####: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
    #####: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
    #####: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
    #####: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
    #####: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 63 returned 100% blocks executed 100%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       63: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      396: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 68%
branch  1 taken 32%
        -: 1263:    {
      135: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 31%
branch  1 taken 69%
        -: 1265:	{
       42: 1266:	  state->coins += 1;
       42: 1267:	}
       93: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 32%
branch  1 taken 68%
        -: 1269:	{
       30: 1270:	  state->coins += 2;
       30: 1271:	}
       63: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 48%
branch  1 taken 52%
        -: 1273:	{
       30: 1274:	  state->coins += 3;
       30: 1275:	}	
      135: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       63: 1279:  state->coins += bonus;
        -: 1280:
       63: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 0 returned 0% blocks executed 0%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
    #####: 1289:  for(i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1290:    drawCard(currentplayer, state);
    #####: 1291:  }
        -: 1292:
    #####: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
    #####: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 0 returned 0% blocks executed 0%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
    #####: 1301:    int z = 0;
        -: 1302:
    #####: 1303:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
    #####: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
        -: 1306://            printf("Gonna shuffle\n");
    #####: 1307:            shuffle(currentPlayer, state);
    #####: 1308:        }
        -: 1309:
    #####: 1310:        drawCard(currentPlayer, state);
        -: 1311:
    #####: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
    #####: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1317:            drawntreasure++;
    #####: 1318:        }
        -: 1319:        else{
    #####: 1320:            temphand[z]=cardDrawn;
    #####: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
    #####: 1325:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1327:        z=z-1;
        -: 1328:    }
    #####: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 0 returned 0% blocks executed 0%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
    #####: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for unittest4: 

*** Testing whoseTurn() ***


*** Testing if Player 1 starts the game ***.

Current Player: 1 	 Expected Player: 1


*** Testing if Player 2 starts the game ***.

Current Player: 2 	 Expected Player: 2


*** Reseting current player to Player 1 ***.
Current Player: 1
Current Player After Ending Turn: 2 	 Expected Player: 2

Test for Player 2 to make a turn:
Current Player: 2
Current Player After Ending Turn: 1 	 Expected Player: 1


All tests for whoseTurn() passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'smithy_card'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'adventurer_card'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:0.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:22.38% of 648
Branches executed:18.40% of 413
Taken at least once:15.98% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 112 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      112:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      112:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       40:   12:    return -1;
       72:   13:  return 0;
      112:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
      760:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      400:   65:        }
       40:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       79:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 98%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 97%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
       38:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      580:  130:	}
        -:  131:
       80:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
       24:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
       56:  150:	}
        8:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        8:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        8:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
      108:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       20:  193:    drawCard(state->whoseTurn, state);
       20:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        4:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 20%
branch  1 taken 80%
        2:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      176:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       80:  215:    card = floor(Random() * state->deckCount[player]);
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      560:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      200:  219:      state->deck[player][i] = state->deck[player][i+1];
      200:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
       80:  226:  }
        -:  227:
        8:  228:  return 0;
       10:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50%
branch  1 taken 50%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
       10:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 49 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       49:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4%
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       47:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       47:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       47:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       47:  576:    state->deckCount[player]--;
       47:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       47:  580:  return 0;
       49:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
    #####: 1181:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1182:    {
        -: 1183:      //add card to played pile
    #####: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
    #####: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
    #####: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
    #####: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
    #####: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
    #####: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
    #####: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
    #####: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
    #####: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 66 returned 100% blocks executed 100%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       66: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      432: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31%
        -: 1263:    {
      150: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 35%
branch  1 taken 65%
        -: 1265:	{
       52: 1266:	  state->coins += 1;
       52: 1267:	}
       98: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 31%
branch  1 taken 69%
        -: 1269:	{
       30: 1270:	  state->coins += 2;
       30: 1271:	}
       68: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 44%
branch  1 taken 56%
        -: 1273:	{
       30: 1274:	  state->coins += 3;
       30: 1275:	}	
      150: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       66: 1279:  state->coins += bonus;
        -: 1280:
       66: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 0 returned 0% blocks executed 0%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
    #####: 1289:  for(i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1290:    drawCard(currentplayer, state);
    #####: 1291:  }
        -: 1292:
    #####: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
    #####: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 0 returned 0% blocks executed 0%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
    #####: 1301:    int z = 0;
        -: 1302:
    #####: 1303:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
    #####: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
        -: 1306://            printf("Gonna shuffle\n");
    #####: 1307:            shuffle(currentPlayer, state);
    #####: 1308:        }
        -: 1309:
    #####: 1310:        drawCard(currentPlayer, state);
        -: 1311:
    #####: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
    #####: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1317:            drawntreasure++;
    #####: 1318:        }
        -: 1319:        else{
    #####: 1320:            temphand[z]=cardDrawn;
    #####: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
    #####: 1325:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1327:        z=z-1;
        -: 1328:    }
    #####: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 0 returned 0% blocks executed 0%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
    #####: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for cardtest1: 

*** Testing smithy_card() ***
		Player 0
Actual Cards: 9 	 Expected Cards: 8
Error: Wrong number of cards!

		Player 1
Actual Cards: 4 	 Expected Cards: 3
Error: Wrong number of cards!


*** Test the affect of handPos ***
		Player 0
Actual Cards: 9 	 Expected Cards: 8 	 handPos: 2
Error: Wrong number of cards!

		Player 1
Actual Cards: 4 	 Expected Cards: 3 	 handPos: 2
Error: Wrong number of cards!



All tests for numHandCards() passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'smithy_card'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'adventurer_card'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:0.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:24.85% of 648
Branches executed:20.34% of 413
Taken at least once:17.19% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 168 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      168:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       60:   12:    return -1;
      108:   13:  return 0;
      168:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1140:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      600:   65:        }
       60:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        6:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        6:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      119:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 98%
branch  1 taken 2%
branch  2 taken 2%
branch  3 taken 98%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
       58:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      870:  130:	}
        -:  131:
      120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
       36:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
       84:  150:	}
       12:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       12:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       12:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
      162:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       30:  193:    drawCard(state->whoseTurn, state);
       30:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        6:  199:}
        -:  200:
function shuffle called 14 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14%
branch  1 taken 86%
        2:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      840:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      300:  219:      state->deck[player][i] = state->deck[player][i+1];
      300:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
      120:  226:  }
        -:  227:
       12:  228:  return 0;
       14:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50%
branch  1 taken 50%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
       10:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 79 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       79:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3%
branch  1 taken 97%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       77:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       77:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       77:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       77:  576:    state->deckCount[player]--;
       77:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       77:  580:  return 0;
       79:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 4 returned 100% blocks executed 80%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
        4: 1181:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1182:    {
        -: 1183:      //add card to played pile
        4: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
        4: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
        4: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
        4: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
        4: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
        4: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
        4: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
        4: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
        4: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 68 returned 100% blocks executed 100%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       68: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      456: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 70%
branch  1 taken 30%
        -: 1263:    {
      160: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 38%
branch  1 taken 63%
        -: 1265:	{
       60: 1266:	  state->coins += 1;
       60: 1267:	}
      100: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 30%
branch  1 taken 70%
        -: 1269:	{
       30: 1270:	  state->coins += 2;
       30: 1271:	}
       70: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 43%
branch  1 taken 57%
        -: 1273:	{
       30: 1274:	  state->coins += 3;
       30: 1275:	}	
      160: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       68: 1279:  state->coins += bonus;
        -: 1280:
       68: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 4 returned 100% blocks executed 100%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
       48: 1289:  for(i = 0; i <= 4; i++){
branch  0 taken 83%
branch  1 taken 17%
       20: 1290:    drawCard(currentplayer, state);
       20: 1291:  }
        -: 1292:
        4: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
        4: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 0 returned 0% blocks executed 0%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
    #####: 1301:    int z = 0;
        -: 1302:
    #####: 1303:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
    #####: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
        -: 1306://            printf("Gonna shuffle\n");
    #####: 1307:            shuffle(currentPlayer, state);
    #####: 1308:        }
        -: 1309:
    #####: 1310:        drawCard(currentPlayer, state);
        -: 1311:
    #####: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
    #####: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1317:            drawntreasure++;
    #####: 1318:        }
        -: 1319:        else{
    #####: 1320:            temphand[z]=cardDrawn;
    #####: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
    #####: 1325:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1327:        z=z-1;
        -: 1328:    }
    #####: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 0 returned 0% blocks executed 0%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
    #####: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for cardtest2: 

*** Testing adventurer_card() ***

*** Test Case 1: Test Case Copper, Copper ***
Actual Discard Count: 0 	 Expected Discard Count: 0
Actual Handcount: 7 	 Expected Handcount: 7

*** Test Case 2: Test Case Copper, Gold ***
Actual Discard Count: 1 	 Expected Discard Count: 1
Actual Handcount: 6 	 Expected Handcount: 7
!!! Test Case 2 Failed: Wrong amount of cards in hand !!!


*** Test Case 3: Test Case Copper, NoCard, NoCard, Copper ***
Actual Discard Count: 2 	 Expected Discard Count: 2
Actual Handcount: 7 	 Expected Handcount: 7

*** Test Case 4: Test Case: No Cards in the Player's Deck ***
Actual Discard Count: 0 	 Expected Discard Count: 0
Actual Handcount: 5 	 Expected Handcount: 5

*** Test Case 5: Test Case: No Cards in the Player's Deck ***
Actual Discard Count: 0 	 Expected Discard Count: 0
Actual Handcount: 7 	 Expected Handcount: 7


All tests for numHandCards() passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'smithy_card'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'adventurer_card'
Lines executed:100.00% of 17
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:0.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:27.47% of 648
Branches executed:22.76% of 413
Taken at least once:19.61% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 308 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      308:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      308:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      110:   12:    return -1;
      198:   13:  return 0;
      308:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
       11:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       22:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      242:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     2420:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     2090:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     1100:   65:        }
      110:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       11:   75:      state->supplyCount[curse] = 10;
       11:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       11:   89:      state->supplyCount[estate] = 8;
       11:   90:      state->supplyCount[duchy] = 8;
       11:   91:      state->supplyCount[province] = 8;
       11:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      462:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     3630:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1705:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      219:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 99%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
      108:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      110:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1595:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1595:  130:	}
        -:  131:
      220:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       66:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       22:  140:      state->deckCount[i] = 0;
      176:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       66:  143:	  state->deck[i][j] = estate;
       66:  144:	  state->deckCount[i]++;
       66:  145:	}
      352:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      154:  148:	  state->deck[i][j] = copper;
      154:  149:	  state->deckCount[i]++;		
      154:  150:	}
       22:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       66:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       22:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       22:  160:    }
        -:  161:
        -:  162:  //draw player hands
       66:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       22:  166:      state->handCount[i] = 0;
       22:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       22:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      616:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
      297:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      132:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       55:  193:    drawCard(state->whoseTurn, state);
       55:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       11:  198:  return 0;
       11:  199:}
        -:  200:
function shuffle called 30 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       30:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       30:  209:  if (state->deckCount[player] < 1)
branch  0 taken 27%
branch  1 taken 73%
        8:  210:    return -1;
       22:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      484:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      220:  215:    card = floor(Random() * state->deckCount[player]);
      220:  216:    newDeck[newDeckPos] = state->deck[player][card];
      220:  217:    newDeckPos++;
     1540:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      550:  219:      state->deck[player][i] = state->deck[player][i+1];
      550:  220:    }
      220:  221:    state->deckCount[player]--;
        -:  222:  }
      484:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      220:  224:    state->deck[player][i] = newDeck[i];
      220:  225:    state->deckCount[player]++;
      220:  226:  }
        -:  227:
       22:  228:  return 0;
       30:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50%
branch  1 taken 50%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
       10:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 117 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      117:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4%
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       10:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        5:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      112:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      112:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      112:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      112:  576:    state->deckCount[player]--;
      112:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      112:  580:  return 0;
      117:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 4 returned 100% blocks executed 80%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
        4: 1181:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1182:    {
        -: 1183:      //add card to played pile
        4: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
        4: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
        4: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
        4: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
        4: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
        4: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
        4: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
        4: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
        4: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 73 returned 100% blocks executed 100%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       73: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      516: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28%
        -: 1263:    {
      185: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 43%
branch  1 taken 57%
        -: 1265:	{
       80: 1266:	  state->coins += 1;
       80: 1267:	}
      105: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 29%
branch  1 taken 71%
        -: 1269:	{
       30: 1270:	  state->coins += 2;
       30: 1271:	}
       75: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 40%
branch  1 taken 60%
        -: 1273:	{
       30: 1274:	  state->coins += 3;
       30: 1275:	}	
      185: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       73: 1279:  state->coins += bonus;
        -: 1280:
       73: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 4 returned 100% blocks executed 100%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
       48: 1289:  for(i = 0; i <= 4; i++){
branch  0 taken 83%
branch  1 taken 17%
       20: 1290:    drawCard(currentplayer, state);
       20: 1291:  }
        -: 1292:
        4: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
        4: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 5 returned 100% blocks executed 100%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
        5: 1301:    int z = 0;
        -: 1302:
       36: 1303:    while(drawntreasure<2){
branch  0 taken 72%
branch  1 taken 28%
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
       13: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 23%
branch  1 taken 77%
        -: 1306://            printf("Gonna shuffle\n");
        3: 1307:            shuffle(currentPlayer, state);
        3: 1308:        }
        -: 1309:
       13: 1310:        drawCard(currentPlayer, state);
        -: 1311:
       13: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
       18: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 taken 38%
branch  1 taken 62%
branch  2 taken 40%
branch  3 taken 60%
       10: 1317:            drawntreasure++;
       10: 1318:        }
        -: 1319:        else{
        3: 1320:            temphand[z]=cardDrawn;
        3: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
       16: 1325:    while(z-1>=0){
branch  0 taken 38%
branch  1 taken 63%
        3: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1327:        z=z-1;
        -: 1328:    }
        5: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 0 returned 0% blocks executed 0%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
    #####: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for cardtest3: 

*** Testing village_card() ***

*** Test Case 1: ***
Original Discard Count: 0
Original Handcount: 5
Original Actions: 1

* Test 1.1
* Increase Discard by 1 *
* Increase Handcount by 1 *
* Increase Actions by 2 *
Actual Discard Count: 0 	 Expected Discard Count: 1
Actual Handcount: 6 		 Expected Handcount: 6
Actual Actions: 3 		 Expected Actions: 3
!!! Test Case 1 Failed: Wrong amount of discarded cards !!!


* Test 1.2
* Increase Discard by 1 *
* Increase Handcount by 1 *
* Increase Actions by 2 *
Actual Discard Count: 0 	 Expected Discard Count: 2
Actual Handcount: 7 		 Expected Handcount: 7
Actual Actions: 5 		 Expected Actions: 5
!!! Test Case 1 Failed: Wrong amount of discarded cards !!!



*** Test Case 2: Testing Extra Actions***

Original Discard Count: 0
Original Handcount: 5
Original Actions: 1
* Adding 1 Action to the player. *
Updated Actions: 2

Actual Discard Count: 0 	 Expected Discard Count: 1
Actual Handcount: 6 		 Expected Handcount: 6
Actual Actions: 4 		 Expected Actions: 3
!!! Test Case 1 Failed: Wrong amount of discarded cards !!!

!!! Test Case 1 Failed: Wrong amount of cards in hand !!!

!!! Test Case 1 Failed: Wrong amount of number of actions !!!



*** Test Case 2: Testing Upper Boundary of Actions***

Original Discard Count: 0
Original Handcount: 5
Original Actions: 1
* Adding 1 Action to the player. *
Updated Actions: 100

Actual Discard Count: 0 	 Expected Discard Count: 1
Actual Handcount: 6 		 Expected Handcount: 6
Actual Actions: 102 		 Expected Actions: 102
!!! Test Case 1 Failed: Wrong amount of discarded cards !!!



All tests for numHandCards() passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'smithy_card'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'adventurer_card'
Lines executed:100.00% of 17
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:100.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:27.93% of 648
Branches executed:22.76% of 413
Taken at least once:19.61% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 336 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      336:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      336:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      120:   12:    return -1;
      216:   13:  return 0;
      336:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 12 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       24:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      264:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     2640:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     2280:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     1200:   65:        }
      120:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
       12:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
       12:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      504:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     3960:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      239:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 99%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
      118:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1740:  130:	}
        -:  131:
      240:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       72:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
      192:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
       72:  145:	}
      384:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;		
      168:  150:	}
       24:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       72:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       24:  160:    }
        -:  161:
        -:  162:  //draw player hands
       72:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       24:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      672:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
      324:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      144:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       60:  193:    drawCard(state->whoseTurn, state);
       60:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
       12:  199:}
        -:  200:
function shuffle called 32 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       32:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       32:  209:  if (state->deckCount[player] < 1)
branch  0 taken 25%
branch  1 taken 75%
        8:  210:    return -1;
       24:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      528:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      240:  215:    card = floor(Random() * state->deckCount[player]);
      240:  216:    newDeck[newDeckPos] = state->deck[player][card];
      240:  217:    newDeckPos++;
     1680:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      600:  219:      state->deck[player][i] = state->deck[player][i+1];
      600:  220:    }
      240:  221:    state->deckCount[player]--;
        -:  222:  }
      528:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      240:  224:    state->deck[player][i] = newDeck[i];
      240:  225:    state->deckCount[player]++;
      240:  226:  }
        -:  227:
       24:  228:  return 0;
       32:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50%
branch  1 taken 50%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
       10:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 126 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      126:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4%
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       10:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        5:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      121:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      121:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      121:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      121:  576:    state->deckCount[player]--;
      121:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      121:  580:  return 0;
      126:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 4 returned 100% blocks executed 80%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
        4: 1181:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1182:    {
        -: 1183:      //add card to played pile
        4: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
        4: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
        4: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
        4: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
        4: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
        4: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
        4: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
        4: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
        4: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 74 returned 100% blocks executed 100%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       74: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      528: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28%
        -: 1263:    {
      190: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 44%
branch  1 taken 56%
        -: 1265:	{
       84: 1266:	  state->coins += 1;
       84: 1267:	}
      106: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 28%
branch  1 taken 72%
        -: 1269:	{
       30: 1270:	  state->coins += 2;
       30: 1271:	}
       76: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 39%
branch  1 taken 61%
        -: 1273:	{
       30: 1274:	  state->coins += 3;
       30: 1275:	}	
      190: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       74: 1279:  state->coins += bonus;
        -: 1280:
       74: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 4 returned 100% blocks executed 100%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
       48: 1289:  for(i = 0; i <= 4; i++){
branch  0 taken 83%
branch  1 taken 17%
       20: 1290:    drawCard(currentplayer, state);
       20: 1291:  }
        -: 1292:
        4: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
        4: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 5 returned 100% blocks executed 100%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
        5: 1301:    int z = 0;
        -: 1302:
       36: 1303:    while(drawntreasure<2){
branch  0 taken 72%
branch  1 taken 28%
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
       13: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 23%
branch  1 taken 77%
        -: 1306://            printf("Gonna shuffle\n");
        3: 1307:            shuffle(currentPlayer, state);
        3: 1308:        }
        -: 1309:
       13: 1310:        drawCard(currentPlayer, state);
        -: 1311:
       13: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
       18: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 taken 38%
branch  1 taken 62%
branch  2 taken 40%
branch  3 taken 60%
       10: 1317:            drawntreasure++;
       10: 1318:        }
        -: 1319:        else{
        3: 1320:            temphand[z]=cardDrawn;
        3: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
       16: 1325:    while(z-1>=0){
branch  0 taken 38%
branch  1 taken 63%
        3: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1327:        z=z-1;
        -: 1328:    }
        5: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 4 returned 100% blocks executed 100%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
        4: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
        4: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
        4: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
    #####: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
    #####: 1379:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
Results for cardtest4: 

*** Testing greathall_card() ***

*** Test Case 1: ***
Original Discard Count: 0
Original Handcount: 5
Original Actions: 1

* Test 1.1
* Increase Discard by 1 *
* Increase Handcount by 1 *
* Increase Actions by 1 *
Actual Discard Count: 1 	 Expected Discard Count: 1
Actual Handcount: 5 		 Expected Handcount: 6
Actual Actions: 2 		 Expected Actions: 2
!!! Test Case 1 Failed: Wrong amount of cards in hand !!!


* Test 1.2
* Increase Discard by 1 *
* Increase Handcount by 1 *
* Increase Actions by 1 *
Actual Discard Count: 2 	 Expected Discard Count: 2
Actual Handcount: 5 		 Expected Handcount: 7
Actual Actions: 3 		 Expected Actions: 3
!!! Test Case 1 Failed: Wrong amount of cards in hand !!!



*** Test Case 2: Testing Extra Actions***

Original Discard Count: 0
Original Handcount: 5
Original Actions: 1
* Adding 1 Action to the player. *
Updated Actions: 2

Actual Discard Count: 1 	 Expected Discard Count: 1
Actual Handcount: 5 		 Expected Handcount: 6
Actual Actions: 3 		 Expected Actions: 3
!!! Test Case 1 Failed: Wrong amount of cards in hand !!!



*** Test Case 2: Testing Upper Boundary of Actions***

Original Discard Count: 0
Original Handcount: 5
Original Actions: 1
* Adding 1 Action to the player. *
Updated Actions: 100

Actual Discard Count: 1 	 Expected Discard Count: 0
Actual Handcount: 5 		 Expected Handcount: 6
Actual Actions: 101 		 Expected Actions: 101
!!! Test Case 1 Failed: Wrong amount of cards in hand !!!



All tests for numHandCards() passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 260
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'smithy_card'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'adventurer_card'
Lines executed:100.00% of 17
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
No calls

Function 'councilroom_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'village_card'
Lines executed:100.00% of 3
No branches
No calls

Function 'greathall_card'
Lines executed:100.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:28.55% of 648
Branches executed:22.76% of 413
Taken at least once:19.61% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 364 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      364:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      364:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      130:   12:    return -1;
      234:   13:  return 0;
      364:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 13 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       13:   44:  SelectStream(1);
       13:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       26:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       13:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      286:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     2860:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     2470:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     1300:   65:        }
      130:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       13:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       13:   75:      state->supplyCount[curse] = 10;
       13:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       13:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       13:   89:      state->supplyCount[estate] = 8;
       13:   90:      state->supplyCount[duchy] = 8;
       13:   91:      state->supplyCount[province] = 8;
       13:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       13:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  102:  state->supplyCount[silver] = 40;
       13:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      546:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     4290:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     2015:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      259:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 99%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        2:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        2:  119:		}
        -:  120:	      else
        -:  121:		{
      128:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      130:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1885:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1885:  130:	}
        -:  131:
      260:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       78:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       26:  140:      state->deckCount[i] = 0;
      208:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       78:  143:	  state->deck[i][j] = estate;
       78:  144:	  state->deckCount[i]++;
       78:  145:	}
      416:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      182:  148:	  state->deck[i][j] = copper;
      182:  149:	  state->deckCount[i]++;		
      182:  150:	}
       26:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       78:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       26:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       26:  160:    }
        -:  161:
        -:  162:  //draw player hands
       78:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       26:  166:      state->handCount[i] = 0;
       26:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       26:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      728:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      351:  178:      state->embargoTokens[i] = 0;
      351:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       13:  182:  state->outpostPlayed = 0;
       13:  183:  state->phase = 0;
       13:  184:  state->numActions = 1;
       13:  185:  state->numBuys = 1;
       13:  186:  state->playedCardCount = 0;
       13:  187:  state->whoseTurn = 0;
       13:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      156:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       65:  193:    drawCard(state->whoseTurn, state);
       65:  194:  }
        -:  195:
       13:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       13:  198:  return 0;
       13:  199:}
        -:  200:
function shuffle called 34 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       34:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       34:  209:  if (state->deckCount[player] < 1)
branch  0 taken 24%
branch  1 taken 76%
        8:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      572:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      260:  215:    card = floor(Random() * state->deckCount[player]);
      260:  216:    newDeck[newDeckPos] = state->deck[player][card];
      260:  217:    newDeckPos++;
     1820:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      650:  219:      state->deck[player][i] = state->deck[player][i+1];
      650:  220:    }
      260:  221:    state->deckCount[player]--;
        -:  222:  }
      572:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      260:  224:    state->deck[player][i] = newDeck[i];
      260:  225:    state->deckCount[player]++;
      260:  226:  }
        -:  227:
       26:  228:  return 0;
       34:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 12 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50%
branch  1 taken 50%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
       10:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 135 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      135:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4%
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       10:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        5:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      130:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      130:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      130:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      130:  576:    state->deckCount[player]--;
      130:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      130:  580:  return 0;
      135:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
    #####:  659:  int cardDrawn = 0;
        -:  660://  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
        -:  671:
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
        -:  677:
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
    #####:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  702:	  printf("That card is too expensive!\n");
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
    #####:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
    #####:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
        -:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
    #####:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
    #####:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        -:  798:      //+3 Cards
    #####:  799:      smithy_card(currentPlayer, state, handPos);
        -:  800:
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case village:
        -:  804:      //+1 Card
    #####:  805:         village_card(state, currentPlayer, handPos);
        -:  806:
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  835:		isGameOver(state);
    #####:  836:	      }
    #####:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
    #####:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
    #####:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:	    isGameOver(state);
    #####:  853:	  }
    #####:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
        -:  863:
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
    #####:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
    #####:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
    #####:  909:			}
    #####:  910:		    }
    #####:  911:		}
    #####:  912:	    }
        -:  913:				
    #####:  914:	}
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
    #####:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
    #####:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
    #####:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
    #####:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
    #####:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
    #####:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
    #####:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
    #####:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
    #####: 1017:	    }
    #####: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1036:	    }
    #####: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
    #####: 1050:		  break;
        -: 1051:		}
    #####: 1052:	    }
    #####: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
    #####: 1080:		}
        -: 1081:					
    #####: 1082:	    }
        -: 1083:				
    #####: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
        -: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case salvager:
        -: 1118:      //+1 buy
    #####: 1119:      state->numBuys++;
        -: 1120:			
    #####: 1121:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
    #####: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1125:	  //trash card
    #####: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
    #####: 1130:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
    #####: 1175:}
        -: 1176:
function discardCard called 8 returned 100% blocks executed 80%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
        8: 1181:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1182:    {
        -: 1183:      //add card to played pile
        8: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1185:      state->playedCardCount++;
        -: 1186://      printf("PlayedCount = %i\n", state->playedCardCount);
        8: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
        8: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
        8: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
        8: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
        8: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
        8: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
        8: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212://    printf("PlayedCount = %i\n", state->playedCardCount);
        -: 1213:
        8: 1214:    return 0;
        -: 1215:}
        -: 1216:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1217:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1218:{
        -: 1219:  //Note: supplyPos is enum of choosen card
        -: 1220:	
        -: 1221:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1222:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
        -: 1227:  //added card for [whoseTurn] current player:
        -: 1228:  // toFlag = 0 : add to discard
        -: 1229:  // toFlag = 1 : add to deck
        -: 1230:  // toFlag = 2 : add to hand
        -: 1231:
    #####: 1232:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1233:    {
    #####: 1234:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1235:      state->deckCount[player]++;
    #####: 1236:    }
    #####: 1237:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1238:    {
    #####: 1239:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1240:      state->handCount[player]++;
    #####: 1241:    }
        -: 1242:  else
        -: 1243:    {
    #####: 1244:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1245:      state->discardCount[player]++;
        -: 1246:    }
        -: 1247:	
        -: 1248:  //decrease number in supply pile
    #####: 1249:  state->supplyCount[supplyPos]--;
        -: 1250:	 
    #####: 1251:  return 0;
    #####: 1252:}
        -: 1253:
function updateCoins called 75 returned 100% blocks executed 100%
        -: 1254:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1255:{
        -: 1256:  int i;
        -: 1257:	
        -: 1258:  //reset coin count
       75: 1259:  state->coins = 0;
        -: 1260:
        -: 1261:  //add coins for each Treasure card in player's hand
      540: 1262:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28%
        -: 1263:    {
      195: 1264:      if (state->hand[player][i] == copper)
branch  0 taken 45%
branch  1 taken 55%
        -: 1265:	{
       88: 1266:	  state->coins += 1;
       88: 1267:	}
      107: 1268:      else if (state->hand[player][i] == silver)
branch  0 taken 28%
branch  1 taken 72%
        -: 1269:	{
       30: 1270:	  state->coins += 2;
       30: 1271:	}
       77: 1272:      else if (state->hand[player][i] == gold)
branch  0 taken 39%
branch  1 taken 61%
        -: 1273:	{
       30: 1274:	  state->coins += 3;
       30: 1275:	}	
      195: 1276:    }	
        -: 1277:
        -: 1278:  //add bonus
       75: 1279:  state->coins += bonus;
        -: 1280:
       75: 1281:  return 0;
        -: 1282:}
        -: 1283:
        -: 1284:
        -: 1285://Increase player's handsize by drawing 3 cards
function smithy_card called 4 returned 100% blocks executed 100%
        -: 1286:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1287:  int i;
        -: 1288:
       48: 1289:  for(i = 0; i <= 4; i++){
branch  0 taken 83%
branch  1 taken 17%
       20: 1290:    drawCard(currentplayer, state);
       20: 1291:  }
        -: 1292:
        4: 1293:  discardCard(handPos, currentplayer, state, 0);
        -: 1294:
        4: 1295:  return 0;
        -: 1296:}
        -: 1297:
        -: 1298:
        -: 1299://Reveals cards from the player's deck until 2 Treasure cards are found.
function adventurer_card called 5 returned 100% blocks executed 100%
        -: 1300:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
        5: 1301:    int z = 0;
        -: 1302:
       36: 1303:    while(drawntreasure<2){
branch  0 taken 72%
branch  1 taken 28%
        -: 1304://        printf("Current deck count: %i\n", state->deckCount[currentPlayer]);
       13: 1305:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 23%
branch  1 taken 77%
        -: 1306://            printf("Gonna shuffle\n");
        3: 1307:            shuffle(currentPlayer, state);
        3: 1308:        }
        -: 1309:
       13: 1310:        drawCard(currentPlayer, state);
        -: 1311:
       13: 1312:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:
        -: 1314://        printf("You drew this card: %i\n", cardDrawn);
        -: 1315:
       18: 1316:        if (cardDrawn == copper || cardDrawn == silver){
branch  0 taken 38%
branch  1 taken 62%
branch  2 taken 40%
branch  3 taken 60%
       10: 1317:            drawntreasure++;
       10: 1318:        }
        -: 1319:        else{
        3: 1320:            temphand[z]=cardDrawn;
        3: 1321:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3: 1322:            z++;
        -: 1323:        }
        -: 1324:    }
       16: 1325:    while(z-1>=0){
branch  0 taken 38%
branch  1 taken 63%
        3: 1326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3: 1327:        z=z-1;
        -: 1328:    }
        5: 1329:}
        -: 1330:
        -: 1331:
        -: 1332:
        -: 1333:
        -: 1334://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
        -: 1335:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1336:    int i;
        -: 1337:
    #####: 1338:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:        drawCard(currentPlayer, state);
    #####: 1341:    }
        -: 1342:
        -: 1343:    //+1 Buy
    #####: 1344:    state->numBuys++;
        -: 1345:
        -: 1346:    //Each other player draws a card
    #####: 1347:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:        drawCard(i, state);
    #####: 1350:    }
        -: 1351:
        -: 1352:    //put played card in played card pile
    #####: 1353:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358://Gives the player 1 card and 2 actions
function village_card called 4 returned 100% blocks executed 100%
        -: 1359:void village_card(struct gameState *state, int currentPlayer,  int handPos){
        4: 1360:    drawCard(currentPlayer, state);
        -: 1361:
        -: 1362:    //+2 Actions
        4: 1363:    state->numActions = state->numActions + 2;
        -: 1364:
        -: 1365:    //discard played card from hand
        -: 1366://    discardCard(handPos, currentPlayer, state, 0);
        4: 1367:}
        -: 1368:
        -: 1369:
        -: 1370:
        -: 1371://Gives the player 1 card and 1 action
function greathall_card called 4 returned 100% blocks executed 100%
        -: 1372:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
        4: 1373:    drawCard(currentPlayer, state);
        -: 1374:
        -: 1375:    //+1 Actions
        4: 1376:    state->numActions++;
        -: 1377:
        -: 1378:    //discard card from hand
        4: 1379:    discardCard(handPos, currentPlayer, state, 0);
        4: 1380:}
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
